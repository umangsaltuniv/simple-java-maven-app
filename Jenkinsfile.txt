pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    stages {
	
	
		stage('Static Code Analysis') {
            steps {
			 script {
          scannerHome = tool 'sonar-scanner'
        }
				withSonarQubeEnv('My SonarQube Server')
				{
				sh "${scannerHome}/bin/sonar-scanner"
				}
			}
	}
		
		stage('UnitTest') {
            steps {
                sh 'mvn test'
				sh 'echo *******unittest******'
            }	
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
		
			stage('Code Coverage') {
			steps {
				step([$class: 'JacocoPub', 
				execPattern: 'target/*.exec',
				classPattern: 'target/classes',
				sourcePattern: 'src/main/java',
				exclusionPattern: 'src/test*'
					])
				}
		}
		
		stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
				sh 'echo *******build******'
            }
        }
				
	stage('upload') {
           steps {
              script { 
                 def server = Artifactory.server 'ART'
                 def uploadSpec = """{
                    "files": [{
                       "pattern": "path/",
                       "target": "path/"
                    }]
                 }"""

                 server.upload(uploadSpec) 
               }
            }
        }
	
		stage('SystemTest') {
            steps {
				sh 'mvn -Dtest=ITHtmlUnitBrowser test'
				sh 'echo *******systemtest******'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
				sh 'echo *******deliver******'
            }
        }
		
    }
}